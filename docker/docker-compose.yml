version: "3.8"
services:
  catalog-service:
    depends_on:
      - polar-postgres
      - config-service
    image: "catalog-service"
    container_name: "catalog-service"
    ports:
      - "9001:9001"
      - "8001:8001"
    environment:
      - BPL_JVM_THREAD_COUNT=50
      - BPL_DEBUG_ENABLED=true
      - BPL_DEBUG_PORT=8001
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://polar-postgres:5432/polardb_catalog
      - SPRING_PROFILES_ACTIVE=testdata
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://host.docker.internal:8080/realms/PolarBookshop
    platform: linux/amd64

  order-service:
    depends_on:
      - polar-postgres
    image: "order-service"
    container_name: "order-service"
    ports:
      - "9002:9002"
      - "8002:8002"
    environment:
      - BPL_DEBUG_ENABLED=true
      - BPL_DEBUG_PORT=8002
      - POLAR_CATALOG_SERVICE_URI=http://catalog-service:9001
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8888
      - SPRING_R2DBC_URL=r2dbc:postgresql://polar-postgres:5432/polardb_order
      - SPRING_FLYWAY_URL=jdbc:postgresql://polar-postgres:5432/polardb_order
      - SPRING_RABBITMQ_HOST=polar-rabbitmq
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://host.docker.internal:8080/realms/PolarBookshop

  dispatcher-service:
    depends_on:
      - polar-rabbitmq
    image: "dispatcher-service"
    container_name: dispatcher-service
    ports:
      - "9003:9003"
      - "8003:8003"
    environment:
      - BPL_DEBUG_ENABLED=true
      - BPL_DEBUG_PORT=8003
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8888
      - SPRING_RABBITMQ_HOST=polar-rabbitmq

  config-service:
    image: "config-service"
    container_name: "config-service"
    ports:
      - "8888:8888"
      - "9888:9888"
    environment:
      - BPL_JVM_THREAD_COUNT=50
      - BPL_DEBUG_ENABLED=true
      - BPL_DEBUG_PORT=9888
    platform: linux/amd64

  edge-service:
    depends_on:
      - polar-keycloak
      - polar-redis
      - polar-ui
    image: "edge-service"
    container_name: "edge-service"
    ports:
      - "9000:9000"
      - "8000:8000"
    environment:
      - BPL_DEBUG_ENABLED=true
      - BPL_DEBUG_PORT=8000
      - CATALOG_SERVICE_URL=http://catalog-service:9001
      - ORDER_SERVICE_URL=http://order-service:9002
      - SPA_URL=http://polar-ui:9004
      - SPRING_CLOUD_CONFIG_URI=http://config-service:8888
      - SPRING_REDIS_HOST=polar-redis
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI=http://host.docker.internal:8080/realms/PolarBookshop

  polar-ui:
    image: "ghcr.io/polarbookshop/polar-ui:v1"
    container_name: "polar-ui"
    ports:
      - "9004:9004" # Nginx가 9004를 통해 SPA를 제공
    environment:
      - PORT=9004 # Nginx 서버의 포트를 9004로 설정한다


  # Backing Services
  polar-postgres:
    image: "postgres:14.10"
    container_name: "polar-postgres"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes: # 초기화 스크립트를 컨테이너에 볼륨으로 마운트 한다
      - ./postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql

  polar-redis:
    image: "redis:7.0"
    container_name: "polar-redis"
    ports:
      - "6379:6379"

  polar-rabbitmq:
    image: "rabbitmq:3.10-management"
    container_name: "polar-rabbitmq"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

  polar-keycloak:
    image: "quay.io/keycloak/keycloak:23.0"
    container_name: "polar-keycloak"
    command:
      - start-dev --import-realm # 키클록을 개발모드로 시작한다
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    environment: # 어드민 유저의 크리덴션을 환경 변수로 정의한다
      - KEYCLOAK_ADMIN=user
      - KEYCLOAK_ADMIN_PASSWORD=password
    ports:
      - "8080:8080"